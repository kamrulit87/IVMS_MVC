//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL.db
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class IVMS_DBEntities : DbContext
    {
        public IVMS_DBEntities()
            : base("name=IVMS_DBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<Card> Cards { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<DeviceInfo> DeviceInfoes { get; set; }
        public virtual DbSet<EmailConfig> EmailConfigs { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<MeetingParticipant> MeetingParticipants { get; set; }
        public virtual DbSet<MeetingRoom> MeetingRooms { get; set; }
        public virtual DbSet<MeetingRoomRequisition> MeetingRoomRequisitions { get; set; }
        public virtual DbSet<PasswordCore> PasswordCores { get; set; }
        public virtual DbSet<PasswordHistory> PasswordHistories { get; set; }
        public virtual DbSet<SEC_LoginStatus> SEC_LoginStatus { get; set; }
        public virtual DbSet<SEC_Password> SEC_Password { get; set; }
        public virtual DbSet<SEC_SecurityQuestion> SEC_SecurityQuestion { get; set; }
        public virtual DbSet<SEC_UIModule> SEC_UIModule { get; set; }
        public virtual DbSet<SEC_UIPage> SEC_UIPage { get; set; }
        public virtual DbSet<SEC_UserActionMapping> SEC_UserActionMapping { get; set; }
        public virtual DbSet<SEC_UserGroup> SEC_UserGroup { get; set; }
        public virtual DbSet<SEC_UserInformation> SEC_UserInformation { get; set; }
        public virtual DbSet<SET_Company> SET_Company { get; set; }
        public virtual DbSet<SET_CompanyBranch> SET_CompanyBranch { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<UserTab> UserTabs { get; set; }
    
        [DbFunction("Entities", "FxPasswordPositionEX")]
        public virtual IQueryable<FxPasswordPositionEX_Result> FxPasswordPositionEX(string iUserId, string iPasswordH, Nullable<System.DateTime> iEntryDate)
        {
            var iUserIdParameter = iUserId != null ?
                new ObjectParameter("iUserId", iUserId) :
                new ObjectParameter("iUserId", typeof(string));
    
            var iPasswordHParameter = iPasswordH != null ?
                new ObjectParameter("iPasswordH", iPasswordH) :
                new ObjectParameter("iPasswordH", typeof(string));
    
            var iEntryDateParameter = iEntryDate.HasValue ?
                new ObjectParameter("iEntryDate", iEntryDate) :
                new ObjectParameter("iEntryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FxPasswordPositionEX_Result>("[Entities].[FxPasswordPositionEX](@iUserId, @iPasswordH, @iEntryDate)", iUserIdParameter, iPasswordHParameter, iEntryDateParameter);
        }
    
        public virtual ObjectResult<sp_AppointmentList_Result> sp_AppointmentList(string iStatus)
        {
            var iStatusParameter = iStatus != null ?
                new ObjectParameter("iStatus", iStatus) :
                new ObjectParameter("iStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AppointmentList_Result>("sp_AppointmentList", iStatusParameter);
        }
    
        public virtual ObjectResult<sp_ScheduleAppList_Result> sp_ScheduleAppList(Nullable<int> iEmployeeID)
        {
            var iEmployeeIDParameter = iEmployeeID.HasValue ?
                new ObjectParameter("iEmployeeID", iEmployeeID) :
                new ObjectParameter("iEmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ScheduleAppList_Result>("sp_ScheduleAppList", iEmployeeIDParameter);
        }
    
        public virtual ObjectResult<sp_VisitorInOutList_Result> sp_VisitorInOutList(Nullable<System.DateTime> iFDate, Nullable<System.DateTime> iTDate, Nullable<int> iDepartmentID, Nullable<int> iEmpID)
        {
            var iFDateParameter = iFDate.HasValue ?
                new ObjectParameter("iFDate", iFDate) :
                new ObjectParameter("iFDate", typeof(System.DateTime));
    
            var iTDateParameter = iTDate.HasValue ?
                new ObjectParameter("iTDate", iTDate) :
                new ObjectParameter("iTDate", typeof(System.DateTime));
    
            var iDepartmentIDParameter = iDepartmentID.HasValue ?
                new ObjectParameter("iDepartmentID", iDepartmentID) :
                new ObjectParameter("iDepartmentID", typeof(int));
    
            var iEmpIDParameter = iEmpID.HasValue ?
                new ObjectParameter("iEmpID", iEmpID) :
                new ObjectParameter("iEmpID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VisitorInOutList_Result>("sp_VisitorInOutList", iFDateParameter, iTDateParameter, iDepartmentIDParameter, iEmpIDParameter);
        }
    
        public virtual int spInsPassword(string rUserId, string rUserName, Nullable<int> rUserGroupId, string rPassword, Nullable<int> rBranchId, ObjectParameter rErr)
        {
            var rUserIdParameter = rUserId != null ?
                new ObjectParameter("rUserId", rUserId) :
                new ObjectParameter("rUserId", typeof(string));
    
            var rUserNameParameter = rUserName != null ?
                new ObjectParameter("rUserName", rUserName) :
                new ObjectParameter("rUserName", typeof(string));
    
            var rUserGroupIdParameter = rUserGroupId.HasValue ?
                new ObjectParameter("rUserGroupId", rUserGroupId) :
                new ObjectParameter("rUserGroupId", typeof(int));
    
            var rPasswordParameter = rPassword != null ?
                new ObjectParameter("rPassword", rPassword) :
                new ObjectParameter("rPassword", typeof(string));
    
            var rBranchIdParameter = rBranchId.HasValue ?
                new ObjectParameter("rBranchId", rBranchId) :
                new ObjectParameter("rBranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsPassword", rUserIdParameter, rUserNameParameter, rUserGroupIdParameter, rPasswordParameter, rBranchIdParameter, rErr);
        }
    
        public virtual int USP_MultipleOptionWiseMeetingScheduleReport(Nullable<int> employeeId, string visitorName, string mobileNo, string visitorCard, string companyName, string status, string fromDate, string toDate)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var visitorNameParameter = visitorName != null ?
                new ObjectParameter("VisitorName", visitorName) :
                new ObjectParameter("VisitorName", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var visitorCardParameter = visitorCard != null ?
                new ObjectParameter("VisitorCard", visitorCard) :
                new ObjectParameter("VisitorCard", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USP_MultipleOptionWiseMeetingScheduleReport", employeeIdParameter, visitorNameParameter, mobileNoParameter, visitorCardParameter, companyNameParameter, statusParameter, fromDateParameter, toDateParameter);
        }
    }
}
